
Function 800104bc
^ Replaces the last 16 bits of some instructions?
^ At least of lis/addi
^ Loads a lot of information between 802701d8 and 804733e4

0538 -> Go to 06e4, that is, start loop
...

053c -> r0 = half [r30]
0540 -> Compare r31 and 0
0544 -> r28 = r28 + r0
0548 -> Go to 0564 if r31 == 0

054c -> r0 = byte [r30 + 0x0003]
0550 -> r3 = word [r26 + 0x0010]
^ r26 = 80270100, probably always
^ [80270110] = 80270148 here
^ 0x0010 in rel is 0x00000048
0554 -> r0 = 8*r0
0558 -> r0 = word [r3+r0]
055c -> r5 = r0 & 0xfffffffe
0560 -> Go to 0568
^ During trace where 0x803133e4 was written, r30 = 80508cec
^ Address in REL = 298BEC
^ Here, we had r0 = 6
^ So r5 = 8054c8e0
^ Note that 0x80270100 + size of main REL = 0x8054c8cc


0564 -> r5 = 0

0568-05c0 -> Jump table
^ If r4 = 6, go to 0624
^ If r4 = 4, go to 0600
^ If r4 = 0, go to 06e0
^ If r4 = 10, go to 0650
^ r4, from 06e4, is the second byte of entry
^ r4 = 6 is for addis
^ r4 = 4 is for addi
^ r4 = 0 I think means ignore

r5 stays the same from 0560-05f0
05f0-05fc -> The same as 0600-060c


% addi stuff
0600 -> r0 = word [r30+0x0004]
0604 -> r0 = r5 + r0
^ Address referenced 
0608 -> half [r28] = r0
060c -> go to 06e0
^ Handles addi instructions?
^ Called when r28 = 0x803133ea

% lis stuff
r5 const through 060c-0620
0624 -> r0 = word [r30 + 0x0004]
0628 -> r4 = r5+r0
^ Address is address that will be referenced by lis
^ Trace, 805bc474
062c -> r0 = r4 & 0x00008000
0630 -> go to 063c if r0 = 0
0634 -> r3 = 1
0638 -> go to 0640
063c -> r3 = 0
^ r3 adds one to addresses for where lis adds one (because there would be a subi after that)
0640 -> r0 = (r4 `rotL` 16) & 0x0000FFFF
0644 -> r0 = r0 + r3
^ r0 is the simm for the lis
0648 -> half [r28] = r0
^ r28 = 0x803133e6
064c -> go to 06e0

% Branch stuff
0650 -> Load entry offset into r0
0654 -> Load from overwrite address into r3
0658-065c -> r0 = r0 + r5 - r28
0660 -> Clear bits 6-29 of r3
0664 -> Insert bits 6-29 from r0 into r3
0668 -> word [r28] = r3
066c -> go to 06e0
^ Handles branches, it seems


...

06e0 -> r30 = r30 + 8
^ Next entry in offset table
06e4 -> r4 = byte [r30 + 0x0002]
06e8-06ec -> Go to 053c if r4 != 203

...

Notes: 
r30 is the address of the entry in a table that determines the address the lis write?

Conclusion: Based on a (big) offset table, it puts data into things
Offset table entry
half at 0x0 - distance between prev load and this load
byte at 0x2 - what type of load? 0x0 is none, 0x4 is addi load, 0x6 is addis load, 0x10 is branch load
byte at 0x3 - what base offset to use? This offset table is at 0x80270148 (offset every 8 bytes)
^ If 0x1, 802701d8
^ If 0x5, 80444160
^ If 0x6, 8054c8e0
^ This are the values for main_loop, main_game, sel_ngc at least
word at 0x4 - The word at this plus the base address, is the word that the addi/addis will write part of 

More notes:
r28 = 0x802701d8 when 800104bc overwrites our REL code
When it gets to 06f0, we have r28=0x804733e4
The start of load entries is 0x804e9d84 = 279c84 REL
The end of load entries is 0x80

Near the end of REL, at 0x8054c874, is a table of pointers to load entry tables.

